
-- Lua HTTP client cosocket driver for OpenResty / ngx_lua.
-- https://github.com/ledgetech/lua-resty-http

require("resty.http")                           -> http

http.new()                                      -> httpc

-- Connection
httpc:connect(options)                                                      -> ok, err, ssl_session
httpc:set_timeout(time)                                                     ->
httpc:set_timeouts(connect_timeout, send_timeout, read_timeout)             ->
httpc:set_keepalive(max_idle_timeout, pool_size)                            -> ok, err
httpc:set_proxy_options(opts)                                               ->
httpc:get_reused_times()                                                    -> times, err
httpc:close()                                                               -> ok, err

-- Requesting
httpc:request(params)               -> res, err
httpc:request_pipeline(params)      -> res[], err
httpc:request_uri(uri, params)      -> rex, err

-- Response
res.status                                              -- The status code.
res.reason                                              -- The status reason phrase.
res.headers                                             -- A table of headers.
res.has_body                                            -- A boolean flag indicating if there is a body to be read.
res.body_reader(buffer_size)        -> chunk, err       -- An iterator function for reading the body in a streaming fashion.
res:read_body()                     -> body, err        -- A method to read the entire body into a string.
res:read_trailers()                 ->                  -- A method to merge any trailers underneath the headers, after reading the body.

rex.status                                              -- The status code.
rex.reason                                              -- The status reason phrase.
rex.headers                                             -- A table of headers.
rex.has_body                                            -- A boolean flag indicating if there is a body to be read.
rex.body                                                -- The entire response body as a string.

-- Utility
httpc:parse_uri(uri, query_in_path?)                -> scheme, host, port, path, query
httpc:get_client_body_reader(chunksize?, sock?)     -> reader, err
reader(buffer_size)                                 -> chunk, err
