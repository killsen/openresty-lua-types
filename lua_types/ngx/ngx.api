
ngx

------------------------------------------------------------
ok                          -> boolean
err                         -> string
------------------------------------------------------------

ngx.null

ngx.ctx
ngx.ctx.*                   -> any

ngx.arg                     -> map<string>

ngx.var                     -- ngx.var.VARIABLE
ngx.var.*                   -> string
ngx.var.app_name            -> string
ngx.var.act_type            -> string
ngx.var.remote_addr         -> string
ngx.var.remote_port         -> string
ngx.var.remote_user         -> string
ngx.var.remote_passwd       -> string
ngx.var.binary_remote_addr  -> string
ngx.var.host                -> string
ngx.var.hostname            -> string
ngx.var.scheme              -> string
ngx.var.https               -> string
ngx.var.http_host           -> string
ngx.var.http_user_agent     -> string
ngx.var.http_content_type   -> string
ngx.var.http_cookie         -> string
ngx.var.server_name         -> string
ngx.var.content_type        -> string
ngx.var.content_length      -> string
ngx.var.is_args             -> string
ngx.var.query_string        -> string
ngx.var.nginx_version       -> string
ngx.var.uri                 -> string
ngx.var.request_uri         -> string
ngx.var.request_method      -> string
ngx.var.request_filename    -> string
ngx.var.cookie_openid       -> string

ngx.location
ngx.location.capture(url)                   -> cap
ngx.location.capture_multi({url}, {url})    -> cap, cap, cap, ...

cap.status          -> number
cap.header          -> map<string>
cap.body            -> string
cap.truncated       -> boolean

ngx.status          -> number
ngx.header          -> map<string>

ngx.resp            -- ngx.resp.get_headers
ngx.resp.get_headers(max_headers=100?, raw=false?)  -> map<string>

ngx.req
ngx.req.is_internal()                               -> boolean
ngx.req.start_time()                                -> number
ngx.req.http_version()                              -> number
ngx.req.raw_header(no_request_line=false?)          -> string
ngx.req.get_method()                                -> string
ngx.req.set_method(method_id)
ngx.req.set_uri(uri, jump=false?)
ngx.req.set_uri_args(args)
ngx.req.get_uri_args(max_args=100?)                 -> map<string>
ngx.req.get_post_args(max_args=100?)                -> map<string>
ngx.req.get_headers(max_headers=100?, raw=false?)   -> map<string>
ngx.req.set_header(name, value)
ngx.req.clear_header(name)
ngx.req.read_body()
ngx.req.discard_body()
ngx.req.get_body_data()                             -> string
ngx.req.get_body_file()                             -> string
ngx.req.set_body_data(data)
ngx.req.set_body_file(file_name, auto_clean=false?)
ngx.req.init_body(buffer_size?)
ngx.req.append_body(data_chunk)
ngx.req.finish_body()

ngx.req.socket() -> tcpsock

ngx.exec(uri, args?)
ngx.redirect(uri, status=302?)
ngx.send_headers()                 -> ok, err
ngx.headers_sent                   -> boolean

ngx.print(...)
ngx.say(...)

ngx.log(ngx.STDERR, ...)
ngx.log(ngx.EMERG , ...)
ngx.log(ngx.ALERT , ...)
ngx.log(ngx.CRIT  , ...)
ngx.log(ngx.ERR   , ...)
ngx.log(ngx.WARN  , ...)
ngx.log(ngx.NOTICE, ...)
ngx.log(ngx.INFO  , ...)
ngx.log(ngx.DEBUG , ...)
ngx.log(log_level , ...)

ngx.flush(wait=false?)                  -> ok, err

ngx.exit(ngx.OK)
ngx.exit(ngx.ERROR)
ngx.exit(ngx.DECLINED)
ngx.exit(ngx.HTTP_OK)
ngx.exit(ngx.HTTP_NOT_FOUND)
ngx.exit(status)

ngx.eof()                               -> ok, err
ngx.sleep(seconds)
ngx.escape_uri(str)                     -> string
ngx.unescape_uri(str)                   -> string
ngx.encode_args(table)                  -> string
ngx.decode_args(str)                    -> any
ngx.encode_base64(str)                  -> string
ngx.decode_base64(str)                  -> string
ngx.crc32_short(str)                    -> number
ngx.crc32_long(str)                     -> number
ngx.hmac_sha1(secret_key, str)          -> string
ngx.md5(str)                            -> string
ngx.md5_bin(str)                        -> string
ngx.sha1_bin(str)                       -> string
ngx.quote_sql_str(raw_value)            -> string
ngx.today()                             -> string
ngx.time()                              -> number
ngx.now()                               -> number
ngx.update_time()
ngx.localtime()                         -> string
ngx.utctime()                           -> string
ngx.cookie_time(sec)                    -> string
ngx.http_time(sec)                      -> string
ngx.parse_http_time(sec)                -> string
ngx.is_subrequest()                     -> boolean

ngx.re -- 正则表达式库
ngx.re.match(subject, regex, options?, ctx?, res_table?)    -> map<string>, err
ngx.re.find(subject, regex, options?, ctx?, nth?)           -> number, number, err
ngx.re.gmatch(subject, regex, options?)                     -> iterator, err
ngx.re.sub(subject, regex, replace, options?)               -> string, number, err
ngx.re.gsub(subject, regex, replace, options?)              -> string, number, err

iterator()  -> map<string>, err

ngx.shared                                          -- ngx.shared.DICT
ngx.shared.*                                        -> DICT
ngx.shared.my_cache                                 -> DICT
ngx.shared.my_locks                                 -> DICT
ngx.shared.my_miss                                  -> DICT
ngx.shared.my_ipc                                   -> DICT
ngx.shared.my_index                                 -> DICT
ngx.shared.my_dns                                   -> DICT

    DICT                                            -- ngx.shared.DICT
    DICT:get(key)                                   -- ngx.shared.DICT.get
    DICT:get_stale(key)                             -- ngx.shared.DICT.get_stale
    DICT:set(key, val, exptime?, flags?)            -- ngx.shared.DICT.set
    DICT:safe_set(key, val, exptime?, flags?)       -- ngx.shared.DICT.safe_set
    DICT:add(key, val, exptime?, flags?)            -- ngx.shared.DICT.add
    DICT:safe_add(key, val, exptime?, flags?)       -- ngx.shared.DICT.safe_add
    DICT:replace(key, val, exptime?, flags?)        -- ngx.shared.DICT.replace
    DICT:delete(key)                                -- ngx.shared.DICT.delete
    DICT:incr(key, val, init?)                      -- ngx.shared.DICT.incr
    DICT:lpush(key, val)                            -- ngx.shared.DICT.lpush
    DICT:rpush(key, val)                            -- ngx.shared.DICT.rpush
    DICT:lpop(key)                                  -- ngx.shared.DICT.lpop
    DICT:rpop(key)                                  -- ngx.shared.DICT.rpop
    DICT:llen(key)                                  -- ngx.shared.DICT.llen
    DICT:ttl(key)                                   -- ngx.shared.DICT.ttl
    DICT:expire(key, exptime)                       -- ngx.shared.DICT.expire
    DICT:flush_all()                                -- ngx.shared.DICT.flush_all
    DICT:flush_expired(max_count?)                  -- ngx.shared.DICT.flush_expired
    DICT:get_keys(max_count?)                       -- ngx.shared.DICT.get_keys
    DICT:capacity()                                 -- ngx.shared.DICT.capacity
    DICT:free_space()                               -- ngx.shared.DICT.free_space

ngx.socket
ngx.socket.udp() -> udpsock

    udpsock
    udpsock:setpeername(host, port)
    udpsock:send(data)
    udpsock:receive(size?)
    udpsock:close()
    udpsock:settimeout(time)

ngx.socket.tcp()                -> tcpsock
ngx.socket.stream()             -> tcpsock
ngx.socket.connect(host, port)  -> tcpsock

    tcpsock
    tcpsock:bind(address)
    tcpsock:connect(host, port, options_table?)
    tcpsock:setclientcert(cert, pkey)
    tcpsock:sslhandshake(reused_session?, server_name?, ssl_verify?)
    tcpsock:send(data)
    tcpsock:receive(size_or_pattern?)
    tcpsock:receiveany(max)
    tcpsock:receiveuntil(pattern, options?)
    tcpsock:close()
    tcpsock:settimeout(time)
    tcpsock:settimeouts(connect_timeout, send_timeout, read_timeout)
    tcpsock:setoption(option, value?)
    tcpsock:setkeepalive(timeout?, size?)
    tcpsock:getreusedtimes()

ngx.get_phase()                             -> string

ngx.thread
ngx.thread.spawn(fun, ...)                  -> thread
ngx.thread.wait(thread1, ...)               -> ok, res1, res2, ...
ngx.thread.kill(thread)                     -> ok, err

ngx.on_abort(callback)                      -> ok, err

ngx.timer
ngx.timer.at(delay, callback, ....)         -> number, err
ngx.timer.every(delay, callback, ....)      -> number, err
ngx.timer.running_count()                   -> number
ngx.timer.pending_count()                   -> number

ngx.config
ngx.config.subsystem            -> string
ngx.config.debug                -> boolean
ngx.config.prefix()             -> string
ngx.config.nginx_version        -> number
ngx.config.nginx_configure()    -> string
ngx.config.ngx_lua_version      -> number

ngx.worker
ngx.worker.exiting()            -> boolean
ngx.worker.pid()                -> number
ngx.worker.id()                 -> number
ngx.worker.count()              -> number

ngx.AGAIN                       -> -2
ngx.ALERT                       -> 2
ngx.CRIT                        -> 3
ngx.DEBUG                       -> 8
ngx.DECLINED                    -> -5
ngx.DONE                        -> -4
ngx.EMERG                       -> 1
ngx.ERR                         -> 4
ngx.ERROR                       -> -1
ngx.INFO                        -> 7
ngx.NOTICE                      -> 6
ngx.OK                          -> 0
ngx.STDERR                      -> 0
ngx.WARN                        -> 5

ngx.HTTP_ACCEPTED               -> 202
ngx.HTTP_BAD_GATEWAY            -> 502
ngx.HTTP_BAD_REQUEST            -> 400
ngx.HTTP_CLOSE                  -> 444
ngx.HTTP_CONFLICT               -> 409
ngx.HTTP_CONTINUE               -> 100
ngx.HTTP_COPY                   -> 128
ngx.HTTP_CREATED                -> 201
ngx.HTTP_DELETE                 -> 32
ngx.HTTP_FORBIDDEN              -> 403
ngx.HTTP_GATEWAY_TIMEOUT        -> 504
ngx.HTTP_GET                    -> 2
ngx.HTTP_GONE                   -> 410
ngx.HTTP_HEAD                   -> 4
ngx.HTTP_ILLEGAL                -> 451
ngx.HTTP_INSUFFICIENT_STORAGE   -> 507
ngx.HTTP_INTERNAL_SERVER_ERROR  -> 500
ngx.HTTP_LOCK                   -> 4096
ngx.HTTP_METHOD_NOT_IMPLEMENTED -> 501
ngx.HTTP_MKCOL                  -> 64
ngx.HTTP_MOVE                   -> 256
ngx.HTTP_MOVED_PERMANENTLY      -> 301
ngx.HTTP_MOVED_TEMPORARILY      -> 302
ngx.HTTP_NOT_ACCEPTABLE         -> 406
ngx.HTTP_NOT_ALLOWED            -> 405
ngx.HTTP_NOT_FOUND              -> 404
ngx.HTTP_NOT_MODIFIED           -> 304
ngx.HTTP_NO_CONTENT             -> 204
ngx.HTTP_OK                     -> 200
ngx.HTTP_OPTIONS                -> 512
ngx.HTTP_PARTIAL_CONTENT        -> 206
ngx.HTTP_PATCH                  -> 16384
ngx.HTTP_PAYMENT_REQUIRED       -> 402
ngx.HTTP_PERMANENT_REDIRECT     -> 308
ngx.HTTP_POST                   -> 8
ngx.HTTP_PROPFIND               -> 1024
ngx.HTTP_PROPPATCH              -> 2048
ngx.HTTP_PUT                    -> 16
ngx.HTTP_REQUEST_TIMEOUT        -> 408
ngx.HTTP_SEE_OTHER              -> 303
ngx.HTTP_SERVICE_UNAVAILABLE    -> 503
ngx.HTTP_SPECIAL_RESPONSE       -> 300
ngx.HTTP_SWITCHING_PROTOCOLS    -> 101
ngx.HTTP_TEMPORARY_REDIRECT     -> 307
ngx.HTTP_TOO_MANY_REQUESTS      -> 429
ngx.HTTP_TRACE                  -> 32768
ngx.HTTP_UNAUTHORIZED           -> 401
ngx.HTTP_UNLOCK                 -> 8192
ngx.HTTP_UPGRADE_REQUIRED       -> 426
ngx.HTTP_VERSION_NOT_SUPPORTED  -> 505
